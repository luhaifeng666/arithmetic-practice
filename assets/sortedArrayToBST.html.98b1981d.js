import{e as n}from"./app.acf6931e.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";var a="/arithmetic-practice/assets/btree1.210eeb59.jpeg",p="/arithmetic-practice/assets/btree2.08b46463.jpeg",e="/arithmetic-practice/assets/btree.44e57381.jpeg";const t={},o=n('<h1 id="\u5C06\u6709\u5E8F\u6570\u7EC4\u8F6C\u6362\u4E3A\u4E8C\u53C9\u641C\u7D22\u6811" tabindex="-1"><a class="header-anchor" href="#\u5C06\u6709\u5E8F\u6570\u7EC4\u8F6C\u6362\u4E3A\u4E8C\u53C9\u641C\u7D22\u6811" aria-hidden="true">#</a> \u5C06\u6709\u5E8F\u6570\u7EC4\u8F6C\u6362\u4E3A\u4E8C\u53C9\u641C\u7D22\u6811</h1><h2 id="\u9898\u76EE" tabindex="-1"><a class="header-anchor" href="#\u9898\u76EE" aria-hidden="true">#</a> \u9898\u76EE</h2><p>\u7ED9\u4F60\u4E00\u4E2A\u6574\u6570\u6570\u7EC4 nums \uFF0C\u5176\u4E2D\u5143\u7D20\u5DF2\u7ECF\u6309 \u5347\u5E8F \u6392\u5217\uFF0C\u8BF7\u4F60\u5C06\u5176\u8F6C\u6362\u4E3A\u4E00\u68F5 \u9AD8\u5EA6\u5E73\u8861 \u4E8C\u53C9\u641C\u7D22\u6811\u3002<br> \u9AD8\u5EA6\u5E73\u8861 \u4E8C\u53C9\u6811\u662F\u4E00\u68F5\u6EE1\u8DB3\u300C\u6BCF\u4E2A\u8282\u70B9\u7684\u5DE6\u53F3\u4E24\u4E2A\u5B50\u6811\u7684\u9AD8\u5EA6\u5DEE\u7684\u7EDD\u5BF9\u503C\u4E0D\u8D85\u8FC7 1 \u300D\u7684\u4E8C\u53C9\u6811\u3002</p><h4 id="\u793A\u4F8B-1" tabindex="-1"><a class="header-anchor" href="#\u793A\u4F8B-1" aria-hidden="true">#</a> \u793A\u4F8B 1\uFF1A</h4><p><img src="'+a+'" alt="img_1.png"></p><blockquote><p>\u8F93\u5165\uFF1Anums = [-10,-3,0,5,9] <br> \u8F93\u51FA\uFF1A[0,-3,9,-10,null,5] <br> \u89E3\u91CA\uFF1A[0,-10,5,null,-3,null,9] \u4E5F\u5C06\u88AB\u89C6\u4E3A\u6B63\u786E\u7B54\u6848\uFF1A<br><img src="'+p+'" alt="img_1.png"></p></blockquote><h4 id="\u793A\u4F8B-2" tabindex="-1"><a class="header-anchor" href="#\u793A\u4F8B-2" aria-hidden="true">#</a> \u793A\u4F8B 2\uFF1A</h4><p><img src="'+e+`" alt="img_1.png"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1Anums = [1,3]
\u8F93\u51FA\uFF1A[3,1]
\u89E3\u91CA\uFF1A[1,3] \u548C [3,1] \u90FD\u662F\u9AD8\u5EA6\u5E73\u8861\u4E8C\u53C9\u641C\u7D22\u6811\u3002
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">\u63D0\u793A\uFF1A</p><p>1 &lt;= nums.length &lt;= 10 ^ 4 -10 ^ 4 &lt;= nums[i] &lt;= 10 ^ 4 nums \u6309 <code>\u4E25\u683C\u9012\u589E</code> \u987A\u5E8F\u6392\u5217</p></div><h2 id="\u9898\u89E3" tabindex="-1"><a class="header-anchor" href="#\u9898\u89E3" aria-hidden="true">#</a> \u9898\u89E3</h2><div class="custom-container tip"><p class="custom-container-title">\u89E3\u9898\u601D\u8DEF</p><p>\u5229\u7528 <code>\u9012\u5F52 + \u4E8C\u5206\u6CD5</code> \u7684\u601D\u60F3\u3002<br> \u6BCF\u6B21\u53D6\u6570\u7EC4\u7684\u4E2D\u95F4\u8282\u70B9\u4E3A\u6839\u8282\u70B9\uFF0C\u5C06\u5DE6\u4FA7\u7684\u6570\u636E\u6302\u5230\u5DE6\u6811\uFF0C\u53F3\u4FA7\u7684\u6570\u636E\u6302\u5230\u53F3\u6811\uFF0C\u4EE5\u6B64\u7C7B\u63A8\u3002</p></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) <span class="token punctuation">{</span>
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * <span class="token punctuation">}</span>
 */</span>
<span class="token keyword">function</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">,</span> val<span class="token punctuation">,</span> left<span class="token operator">?</span><span class="token punctuation">,</span> right<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token operator">===</span><span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> val<span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token punctuation">(</span>left<span class="token operator">===</span><span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> left<span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token punctuation">(</span>right<span class="token operator">===</span><span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> right<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token punctuation">{</span>number[]<span class="token punctuation">}</span> nums
 * <span class="token keyword">@return</span> <span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span>
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">sortedArrayToBST</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>
  <span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>
  root<span class="token punctuation">.</span>left <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token function">sortedArrayToBST</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span>
  root<span class="token punctuation">.</span>right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token function">sortedArrayToBST</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span>
  <span class="token keyword">return</span> root
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div>`,13);function c(r,l){return o}var k=s(t,[["render",c]]);export{k as default};
